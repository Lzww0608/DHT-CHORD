// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: dht.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Chord_FindSuccessor_FullMethodName   = "/protos.Chord/FindSuccessor"
	Chord_Notify_FullMethodName          = "/protos.Chord/Notify"
	Chord_FindPredecessor_FullMethodName = "/protos.Chord/FindPredecessor"
	Chord_Ping_FullMethodName            = "/protos.Chord/Ping"
)

// ChordClient is the client API for Chord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChordClient interface {
	FindSuccessor(ctx context.Context, in *FindSuccessorRequest, opts ...grpc.CallOption) (*Node, error)
	Notify(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Result, error)
	FindPredecessor(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	Ping(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Void, error)
}

type chordClient struct {
	cc grpc.ClientConnInterface
}

func NewChordClient(cc grpc.ClientConnInterface) ChordClient {
	return &chordClient{cc}
}

func (c *chordClient) FindSuccessor(ctx context.Context, in *FindSuccessorRequest, opts ...grpc.CallOption) (*Node, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Node)
	err := c.cc.Invoke(ctx, Chord_FindSuccessor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Notify(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, Chord_Notify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) FindPredecessor(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Node)
	err := c.cc.Invoke(ctx, Chord_FindPredecessor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Ping(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, Chord_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChordServer is the server API for Chord service.
// All implementations must embed UnimplementedChordServer
// for forward compatibility
type ChordServer interface {
	FindSuccessor(context.Context, *FindSuccessorRequest) (*Node, error)
	Notify(context.Context, *Node) (*Result, error)
	FindPredecessor(context.Context, *Node) (*Node, error)
	Ping(context.Context, *Node) (*Void, error)
	mustEmbedUnimplementedChordServer()
}

// UnimplementedChordServer must be embedded to have forward compatible implementations.
type UnimplementedChordServer struct {
}

func (UnimplementedChordServer) FindSuccessor(context.Context, *FindSuccessorRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSuccessor not implemented")
}
func (UnimplementedChordServer) Notify(context.Context, *Node) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedChordServer) FindPredecessor(context.Context, *Node) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPredecessor not implemented")
}
func (UnimplementedChordServer) Ping(context.Context, *Node) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedChordServer) mustEmbedUnimplementedChordServer() {}

// UnsafeChordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChordServer will
// result in compilation errors.
type UnsafeChordServer interface {
	mustEmbedUnimplementedChordServer()
}

func RegisterChordServer(s grpc.ServiceRegistrar, srv ChordServer) {
	s.RegisterService(&Chord_ServiceDesc, srv)
}

func _Chord_FindSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSuccessorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).FindSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chord_FindSuccessor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).FindSuccessor(ctx, req.(*FindSuccessorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chord_Notify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Notify(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_FindPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).FindPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chord_FindPredecessor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).FindPredecessor(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chord_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Ping(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

// Chord_ServiceDesc is the grpc.ServiceDesc for Chord service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chord_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Chord",
	HandlerType: (*ChordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindSuccessor",
			Handler:    _Chord_FindSuccessor_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _Chord_Notify_Handler,
		},
		{
			MethodName: "FindPredecessor",
			Handler:    _Chord_FindPredecessor_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Chord_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dht.proto",
}

const (
	Kad_Ping_FullMethodName      = "/protos.Kad/Ping"
	Kad_FindNode_FullMethodName  = "/protos.Kad/FindNode"
	Kad_FindValue_FullMethodName = "/protos.Kad/FindValue"
	Kad_Store_FullMethodName     = "/protos.Kad/Store"
)

// KadClient is the client API for Kad service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KadClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	FindNode(ctx context.Context, in *FindNodeRequest, opts ...grpc.CallOption) (*FindNodeReply, error)
	FindValue(ctx context.Context, in *FindValueRequest, opts ...grpc.CallOption) (*FindValueReply, error)
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreReply, error)
}

type kadClient struct {
	cc grpc.ClientConnInterface
}

func NewKadClient(cc grpc.ClientConnInterface) KadClient {
	return &kadClient{cc}
}

func (c *kadClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingReply)
	err := c.cc.Invoke(ctx, Kad_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kadClient) FindNode(ctx context.Context, in *FindNodeRequest, opts ...grpc.CallOption) (*FindNodeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindNodeReply)
	err := c.cc.Invoke(ctx, Kad_FindNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kadClient) FindValue(ctx context.Context, in *FindValueRequest, opts ...grpc.CallOption) (*FindValueReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindValueReply)
	err := c.cc.Invoke(ctx, Kad_FindValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kadClient) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreReply)
	err := c.cc.Invoke(ctx, Kad_Store_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KadServer is the server API for Kad service.
// All implementations must embed UnimplementedKadServer
// for forward compatibility
type KadServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	FindNode(context.Context, *FindNodeRequest) (*FindNodeReply, error)
	FindValue(context.Context, *FindValueRequest) (*FindValueReply, error)
	Store(context.Context, *StoreRequest) (*StoreReply, error)
	mustEmbedUnimplementedKadServer()
}

// UnimplementedKadServer must be embedded to have forward compatible implementations.
type UnimplementedKadServer struct {
}

func (UnimplementedKadServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedKadServer) FindNode(context.Context, *FindNodeRequest) (*FindNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNode not implemented")
}
func (UnimplementedKadServer) FindValue(context.Context, *FindValueRequest) (*FindValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindValue not implemented")
}
func (UnimplementedKadServer) Store(context.Context, *StoreRequest) (*StoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedKadServer) mustEmbedUnimplementedKadServer() {}

// UnsafeKadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KadServer will
// result in compilation errors.
type UnsafeKadServer interface {
	mustEmbedUnimplementedKadServer()
}

func RegisterKadServer(s grpc.ServiceRegistrar, srv KadServer) {
	s.RegisterService(&Kad_ServiceDesc, srv)
}

func _Kad_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KadServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kad_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KadServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kad_FindNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KadServer).FindNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kad_FindNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KadServer).FindNode(ctx, req.(*FindNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kad_FindValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KadServer).FindValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kad_FindValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KadServer).FindValue(ctx, req.(*FindValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kad_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KadServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kad_Store_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KadServer).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Kad_ServiceDesc is the grpc.ServiceDesc for Kad service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kad_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Kad",
	HandlerType: (*KadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Kad_Ping_Handler,
		},
		{
			MethodName: "FindNode",
			Handler:    _Kad_FindNode_Handler,
		},
		{
			MethodName: "FindValue",
			Handler:    _Kad_FindValue_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _Kad_Store_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dht.proto",
}

const (
	DHT_Get_FullMethodName     = "/protos.DHT/Get"
	DHT_Put_FullMethodName     = "/protos.DHT/Put"
	DHT_Del_FullMethodName     = "/protos.DHT/Del"
	DHT_Control_FullMethodName = "/protos.DHT/Control"
)

// DHTClient is the client API for DHT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DHTClient interface {
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Pair, error)
	Put(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Result, error)
	Del(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Result, error)
	Control(ctx context.Context, in *ControlRequest, opts ...grpc.CallOption) (*Result, error)
}

type dHTClient struct {
	cc grpc.ClientConnInterface
}

func NewDHTClient(cc grpc.ClientConnInterface) DHTClient {
	return &dHTClient{cc}
}

func (c *dHTClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Pair, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pair)
	err := c.cc.Invoke(ctx, DHT_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTClient) Put(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, DHT_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTClient) Del(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, DHT_Del_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTClient) Control(ctx context.Context, in *ControlRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, DHT_Control_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DHTServer is the server API for DHT service.
// All implementations must embed UnimplementedDHTServer
// for forward compatibility
type DHTServer interface {
	Get(context.Context, *Key) (*Pair, error)
	Put(context.Context, *Pair) (*Result, error)
	Del(context.Context, *Key) (*Result, error)
	Control(context.Context, *ControlRequest) (*Result, error)
	mustEmbedUnimplementedDHTServer()
}

// UnimplementedDHTServer must be embedded to have forward compatible implementations.
type UnimplementedDHTServer struct {
}

func (UnimplementedDHTServer) Get(context.Context, *Key) (*Pair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDHTServer) Put(context.Context, *Pair) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedDHTServer) Del(context.Context, *Key) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedDHTServer) Control(context.Context, *ControlRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Control not implemented")
}
func (UnimplementedDHTServer) mustEmbedUnimplementedDHTServer() {}

// UnsafeDHTServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DHTServer will
// result in compilation errors.
type UnsafeDHTServer interface {
	mustEmbedUnimplementedDHTServer()
}

func RegisterDHTServer(s grpc.ServiceRegistrar, srv DHTServer) {
	s.RegisterService(&DHT_ServiceDesc, srv)
}

func _DHT_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DHT_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTServer).Get(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHT_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DHT_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTServer).Put(ctx, req.(*Pair))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHT_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DHT_Del_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTServer).Del(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHT_Control_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTServer).Control(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DHT_Control_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTServer).Control(ctx, req.(*ControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DHT_ServiceDesc is the grpc.ServiceDesc for DHT service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DHT_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.DHT",
	HandlerType: (*DHTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _DHT_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _DHT_Put_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _DHT_Del_Handler,
		},
		{
			MethodName: "Control",
			Handler:    _DHT_Control_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dht.proto",
}
